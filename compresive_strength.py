# -*- coding: utf-8 -*-
"""Compresive_Strength.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VHxhRsWYuFPOoz8-xQNgq1ttPNVd1JgQ
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import seaborn as sns
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense 
from tensorflow.keras.optimizers import Adam, SGD

"""# **Data Loading**"""

data = pd.read_csv('/content/compresive_strength_concrete.csv')

data.describe()

# show the boolean dataframe             
print(" \nshow the boolean Dataframe : \n\n", data.isnull())  
# Count total NaN in a DataFrame 
print(" \nCount total NaN in a DataFrame : \n\n", 
       data.isnull().sum().sum())

print(data.shape)

data.info()

print(data.columns)

"""# **Spliting**"""

X=data.iloc[:,0:8]
y=data.iloc[:,-1]

data.head()

X.head()

y.head()

# separate dataset into train and test
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.4, random_state=42)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

"""# **Feature Selection**"""

corrmat = data.corr()
top_corr_features = corrmat.index
plt.figure(figsize=(12,15))
g=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap="RdYlGn")

# with the following function we can select highly correlated features
# it will remove the first feature that is correlated with anything other feature

def correlation(dataset, threshold):
    col_corr = set()  # Set of all the names of correlated columns
    corr_matrix = dataset.corr()
    for i in range(len(corr_matrix.columns)):
        for j in range(i):
            if abs(corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value
                colname = corr_matrix.columns[i]  # getting the name of column
                col_corr.add(colname)
    return col_corr

corr_features = correlation(X_train, 0.7)
len(set(corr_features))

corr_features

X_train = X_train.drop(corr_features,axis=1)
X_test= X_test.drop(corr_features,axis=1)

X_train

"""# **Standardizing Dataset**"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler().fit(X_train)
X_train= scaler.transform(X_train)
X_test= scaler.transform(X_test)

X_train

input_shape=(X_train.shape[1],)
  input_shape

"""# **Network Building and Training**"""

from tensorflow.keras import models
from tensorflow.keras import layers

def build_model():
    model = models.Sequential()
    model.add(layers.Dense(10, activation='relu',
                           input_shape=(X_train.shape[1],)))
    model.add(layers.Dense(8, activation='relu'))
    model.add(layers.Dense(6, activation='relu'))
    model.add(layers.Dense(1))
    model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])
    return model

model = build_model()
model.fit(X_train,y_train,validation_split=0.33,epochs=100,batch_size=16, verbose=0)
test_mse_score, test_mae_score = model.evaluate(X_test, y_test)

# predicting the test set results
y_pred = model.predict(X_test)

y_pred[:5].astype('int64')

y_test[:5]